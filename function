import settings
import json
import requests
import logging

LOGGER = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)


class FunctionException(Exception):
    pass


max_delta = settings.MAX_DELTA
base_language = settings.BASE_LANGUAGE
get_all_locales_url = settings.API_URL + "/locales"
get_all_assets_url = settings.API_URL + "/assets"
get_translations_by_assets_url = settings.API_URL + "/translations/{0}.json"
params = dict(key=settings.API_KEY)


def make_request(url):
    LOGGER.debug(
        f"Start function 'make_request', "
        f"URL =  {url}, API_KEY = {settings.API_KEY}")
    response = requests.get(url, params)
    if response.ok:
        return response.json()
    raise FunctionException(f"Function 'make_request': ERROR. Status_code : {response.status_code}")


def get_locales() -> list:
    LOGGER.info(
        f"Start function 'get_locales")
    locales_request = make_request(get_all_locales_url)
    locales = [locale['code'] for locale in locales_request]
    LOGGER.info(
        f"Project locales: {locales}")
    return locales


def get_all_assets() -> list:
    assets_request = make_request(get_all_assets_url)
    LOGGER.info(
        f"Downloading assets")
    assets = [asset['id'] for asset in assets_request]
    LOGGER.info(
        f"Project assets count: {len(assets)}\n"
        f"Project assets: {assets}")
    return assets


def base_language_choice() -> str:
    project_locales = get_locales()
    if base_language in project_locales:
        LOGGER.info(f"'Вы выбрали базовую локаль' / "
                    f"'You have chosen the basic locale': {base_language}")
        return str(base_language)
    else:
        raise Exception(f"'Данная локаль не найдена на проекте' / "
                        f"'The locale was not found on the project': {base_language}, \n"
                        f"'Список доступных локалей' / "
                        f"'The list of available locales': {project_locales}")


def get_translations_by_asset_id(asset_id):
    api = get_translations_by_assets_url.format(asset_id)
    return make_request(api)


def string_comparator(assets):
    row_count = 0
    dump = {}
    LOGGER.info(f"Максимальное допустимое отклонение: {max_delta}")
    for asset_id in assets:
        locales = get_translations_by_asset_id(asset_id)
        base_locale_translation = list(
            filter(
                lambda locale: locale['locale']['code'] == base_language, locales))[0]['translation']

        base_local_len = len(base_locale_translation) + max_delta
        different = [
            {
                locale['locale']['code']: f"{abs(base_local_len - len(locale['translation']))} символа(ов). "
                                          f"Translation:  {locale['translation']} / {base_locale_translation}"
            }
            for locale in locales
            if locale['locale']['code'] != base_language and base_local_len < len(locale['translation'])

        ]
        dump[f"Asset_id: {asset_id}"] = different

        for i in different:
            for k, v in i.items():
                row_count += 1
                LOGGER.error(f"  Id: {row_count}. Asset_id: {asset_id}. "
                             f"Локаль: {k} {v}")
    LOGGER.info(f"  Общее кол-во отклонений: {row_count}")

    file = open('different.json', 'w')
    file.write(json.dumps(dump))


if __name__ == "__main__":
    base_language_choice()
    all_assets = get_all_assets()
    string_comparator(all_assets)
